generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model supperAdmin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique(map: "supper_admin")
  password  String
  image     String?
  createdAt DateTime @default(now())
}

model admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique(map: "Admin_email_key")
  password  String
  image     String?
  createdAt DateTime @default(now())
}

model complaint {
  id         Int              @id @default(autoincrement())
  customerId Int?
  supplierId Int?
  message    String
  status     complaint_status @default(PENDING)
  createdAt  DateTime         @default(now())
  customer   customer?        @relation(fields: [customerId], references: [id], map: "Complaint_customerId_fkey")
  supplier   supplier?        @relation(fields: [supplierId], references: [id], map: "Complaint_supplierId_fkey")

  @@index([customerId], map: "Complaint_customerId_fkey")
  @@index([supplierId], map: "Complaint_supplierId_fkey")
}

model customer {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique(map: "Customer_email_key")
  password     String
  phone        String?
  image        String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  complaint    complaint[]
  order        order[]
  transactions Transaction[]
}

model message {
  id           Int                  @id @default(autoincrement())
  senderId     Int
  senderType   message_senderType
  receiverId   Int
  receiverType message_receiverType
  content      String
  createdAt    DateTime             @default(now())
}

model address {
  id      Int    @id @default(autoincrement())
  address String
}

model bank {
  id         Int    @id @default(autoincrement())
  supplierId Int
  bankName   String
  account    String

  supplier supplier @relation(fields: [supplierId], references: [id], map: "bank_supplierId")
}

model Transaction {
  id            Int      @id @default(autoincrement())
  transactionId String   @unique
  customerId    Int
  createdAt     DateTime @default(now())

  customer customer @relation(fields: [customerId], references: [id])
  orders   order[]
  payment  payment?
}

model order {
  id             Int          @id @default(autoincrement())
  customerId     Int
  supplierId     Int
  address        String
  latitude       Float?
  longitude      Float?
  totalPrice     Float
  deliveryOption String
  transactionId  String
  createdAt      DateTime     @default(now())
  status         order_status @default(PENDING)

  customer    customer    @relation(fields: [customerId], references: [id], map: "Order_customerId_fkey")
  supplier    supplier    @relation(fields: [supplierId], references: [id], map: "Order_supplierId_fkey")
  transaction Transaction @relation(fields: [transactionId], references: [transactionId])

  orderitem orderitem[]

  @@index([customerId], map: "Order_customerId_fkey")
  @@index([supplierId], map: "Order_supplierId_fkey")
  @@index([transactionId])
}

model orderitem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Float
  subtotal  Float

  order   order   @relation(fields: [orderId], references: [id], map: "OrderItem_orderId_fkey")
  product product @relation(fields: [productId], references: [id], map: "OrderItem_productId_fkey")

  @@index([orderId], map: "OrderItem_orderId_fkey")
}

model payment {
  id                Int            @id @default(autoincrement())
  transactionId     String         @unique
  amount            Float
  bankId            Int
  status            payment_status @default(PENDING)
  payedStatus       payed_status   @default(PENDING)
  createdAt         DateTime       @default(now())
  bankTransactionId String
  image             String

  transaction Transaction @relation(fields: [transactionId], references: [transactionId])
  bank        bankAccount @relation(fields: [bankId], references: [id], map: "Payment_bankId")
}

model product {
  id                 Int      @id @default(autoincrement())
  name               String
  categoryId         Int
  price              Float
  stock              Int      @default(0)
  supplierId         Int
  image              String?
  unit               String   @default("piece")
  createdAt          DateTime @default(now())
  offersDelivery     Boolean  @default(false)
  deliveryPricePerKm Float?

  orderItem orderitem[]
  category  category    @relation(fields: [categoryId], references: [id])
  supplier  supplier    @relation(fields: [supplierId], references: [id])

  @@index([supplierId], map: "Product_supplierId_fkey")
}

model supplier {
  id            Int      @id @default(autoincrement())
  companyName   String
  email         String   @unique(map: "Supplier_email_key")
  password      String
  phone         String
  address       String
  image         String?
  isActive      Boolean  @default(true)
  isVerify      Boolean  @default(true)
  lat           Float
  lng           Float
  tinNumber     String   @unique(map: "Supplier_tinNumber_key") @db.VarChar(10)
  licenseNumber String   @unique(map: "Supplier_license_key") @db.VarChar(20)
  isApproved    Boolean  @default(false)
  createdAt     DateTime @default(now())

  complaint complaint[]
  order     order[]
  product   product[]
  bank      bank[]
}

model supplierVerifiy {
  id          Int     @id @default(autoincrement())
  supplierId  Int     @unique
  userImage   String?
  licenseFile String?
  isReviw     Boolean @default(true)
}

model bankAccount {
  id            Int       @id @default(autoincrement())
  name          String
  accountNumber String
  payment       payment[]
}

model category {
  id       Int       @id @default(autoincrement())
  category String    @unique(map: "category_key")
  product  product[]
}

enum message_senderType {
  CUSTOMER
  SUPPLIER
}

enum complaint_status {
  PENDING
  RESOLVED
  REJECTED
}

enum message_receiverType {
  CUSTOMER
  SUPPLIER
}

enum payment_status {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum payed_status {
  PENDING
  PAYED
}

enum order_status {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
